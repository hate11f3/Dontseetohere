from .. import loader, utils
import re

@loader.tds
class TriggersMod(loader.Module):
    """–¢—Ä–∏–≥–≥–µ—Ä—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ)"""
    strings = {
        "name": "Triggers",
        "chat_enabled": "‚úÖ –¢—Ä–∏–≥–≥–µ—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã",
        "chat_disabled": "‚ùå –¢—Ä–∏–≥–≥–µ—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã",
        "chat_status": "üîÑ {}",
        "need_reply": "‚ùå –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞. –ù–∞–ø—Ä–∏–º–µ—Ä —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –Ω–∞ —Å–ª–æ–≤–æ <b>–ø—Ä–∏–≤–µ—Ç</b> –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å <b>–ü—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞</b>, —Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ <code>–ü—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞</code> –∏ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π <code>trigadd –ø—Ä–∏–≤–µ—Ç</code>",
        "trigger_added": "‚úÖ –¢—Ä–∏–≥–≥–µ—Ä <code>{}</code> –¥–æ–±–∞–≤–ª–µ–Ω (ID: <code>{}</code>)",
        "trigger_exists": "‚ö†Ô∏è –¢—Ä–∏–≥–≥–µ—Ä <code>{}</code> —É–∂–µ –µ—Å—Ç—å",
        "trigger_deleted": "‚úÖ –¢—Ä–∏–≥–≥–µ—Ä —Å ID <code>{}</code> —É–¥–∞–ª—ë–Ω",
        "trigger_not_found": "‚ùå –¢—Ä–∏–≥–≥–µ—Ä —Å ID <code>{}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω",
        "mode_changed": "‚úÖ –†–µ–∂–∏–º —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {}",
        "trigger_list": "üìã –°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ ({}):\n\n{}\n\nüîí - –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º\nüîç - –ß–∞—Å—Ç–∏—á–Ω—ã–π —Ä–µ–∂–∏–º\n\n‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, —Å–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–æ–≤—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã.",
        "no_triggers": "‚ÑπÔ∏è –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤",
        "mode_menu": "üîß –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:\n\nüîí –°—Ç—Ä–æ–≥–∏–π - –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ç–æ—á–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ —Ñ—Ä–∞–∑—ã –∏–ª–∏ —Å–ª–æ–≤–∞\n\nüîç –ß–∞—Å—Ç–∏—á–Ω—ã–π - –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã –≤ —Ç–µ–∫—Å—Ç–µ",
        "strict_mode": "–°—Ç—Ä–æ–≥–∏–π",
        "partial_mode": "–ß–∞—Å—Ç–∏—á–Ω—ã–π",
        "strict_desc": "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ç–æ—á–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ —Ñ—Ä–∞–∑—ã",
        "partial_desc": "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ñ—Ä–∞–∑—ã –≤ —Ç–µ–∫—Å—Ç–µ",
        "banned": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤",
        "unbanned": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–±—Ä–∞–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤",
        "already_banned": "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ",
        "not_banned": "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ",
        "ban_list": "üìã –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:\n\n{}",
        "empty_ban_list": "‚ÑπÔ∏è –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –ø—É—Å—Ç",
    }

    def __init__(self):
        self.db = None
        self.triggers = {}
        self.modes = {}

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.triggers = self.db.get("Triggers", "triggers", {}) or {}
        self.modes = self.db.get("Triggers", "modes", {}) or {}

    async def trigchatcmd(self, message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"""
        chat_id = str(message.chat_id)
        chats = self.db.get("Triggers", "chats", {}) or {}
        new_status = not chats.get(chat_id, False)
        chats[chat_id] = new_status
        self.db.set("Triggers", "chats", chats)
        status_text = self.strings["chat_enabled"] if new_status else self.strings["chat_disabled"]
        await utils.answer(message, self.strings["chat_status"].format(status_text))

    async def trigaddcmd(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è –æ—Ç–≤–µ—Ç–æ–º).–ù–∞–ø—Ä–∏–º–µ—Ä —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –Ω–∞ —Å–ª–æ–≤–æ '–ø—Ä–∏–≤–µ—Ç' –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å '–ü—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞', —Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ü—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞' –∏ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π trigadd –ø—Ä–∏–≤–µ—Ç"""
        if not message.is_reply:
            await utils.answer(message, self.strings["need_reply"])
            return
        chat_id = str(message.chat_id)
        trigger_name = utils.get_args_raw(message).lower().strip()
        reply_msg = await message.get_reply_message()
        
        if chat_id not in self.triggers:
            self.triggers[chat_id] = {}
        if trigger_name in self.triggers[chat_id]:
            await utils.answer(message, self.strings["trigger_exists"].format(trigger_name))
            return
        
        trigger_id = len(self.triggers[chat_id]) + 1
        data = {
            "id": trigger_id, 
            "mode": self.modes.get(str(message.sender_id), "strict"),
            "chat_id": reply_msg.chat_id,
            "message_id": reply_msg.id
        }
        
        self.triggers[chat_id][trigger_name] = data
        self.db.set("Triggers", "triggers", self.triggers)
        await utils.answer(message, self.strings["trigger_added"].format(trigger_name, trigger_id))

    async def trigmodecmd(self, message):
        """–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        user_id = str(message.sender_id)
        current_mode = self.modes.get(user_id, "strict")

        def btn_text(mode_key):
            check = "‚úÖ " if mode_key == current_mode else ""
            return f"{check}{self.strings[mode_key + '_mode']}"

        await self.inline.form(
            message=message,
            text=self.strings["mode_menu"],
            reply_markup=[
                [{
                    "text": btn_text("strict"),
                    "callback": self.set_mode,
                    "args": ("strict",),
                    "description": self.strings["strict_desc"]
                }],
                [{
                    "text": btn_text("partial"),
                    "callback": self.set_mode,
                    "args": ("partial",),
                    "description": self.strings["partial_desc"]
                }]
            ],
            silent=True
        )

    async def set_mode(self, call, mode):
        user_id = str(call.from_user.id)
        self.modes[user_id] = mode
        self.db.set("Triggers", "modes", self.modes)

        def btn_text(mode_key):
            check = "‚úÖ " if mode_key == mode else ""
            return f"{check}{self.strings[mode_key + '_mode']}"

        await call.edit(
            self.strings["mode_menu"],
            reply_markup=[
                [{
                    "text": btn_text("strict"),
                    "callback": self.set_mode,
                    "args": ("strict",),
                    "description": self.strings["strict_desc"]
                }],
                [{
                    "text": btn_text("partial"),
                    "callback": self.set_mode,
                    "args": ("partial",),
                    "description": self.strings["partial_desc"]
                }]
            ]
        )
        await call.answer(self.strings["mode_changed"].format(
            self.strings["strict_mode"] if mode == "strict" else self.strings["partial_mode"]), show_alert=False)

    async def trigdelcmd(self, message):
        """–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä –ø–æ ID"""
        args = utils.get_args_raw(message)
        if not args or not args.isdigit():
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        trigger_id = int(args)
        chat_id = str(message.chat_id)
        if chat_id not in self.triggers or not self.triggers[chat_id]:
            await utils.answer(message, self.strings["no_triggers"])
            return
        deleted = False
        for trigger_name, data in list(self.triggers[chat_id].items()):
            if data["id"] == trigger_id:
                del self.triggers[chat_id][trigger_name]
                deleted = True
                break
        if deleted:
            for idx, (_, data) in enumerate(self.triggers[chat_id].items(), 1):
                data["id"] = idx
            self.db.set("Triggers", "triggers", self.triggers)
            await utils.answer(message, self.strings["trigger_deleted"].format(trigger_id))
        else:
            await utils.answer(message, self.strings["trigger_not_found"].format(trigger_id))

    def get_media_emoji(self, media):
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –º–µ–¥–∏–∞"""
        if not media:
            return ""
            
        if hasattr(media, 'photo') or str(type(media)).find('Photo') != -1:
            return "[üì∑]"
        elif hasattr(media, 'video') or str(type(media)).find('Video') != -1:
            return "[üé¨]"
        elif hasattr(media, 'document') or str(type(media)).find('Document') != -1:
            if hasattr(media, 'mime_type'):
                mime = media.mime_type
                if mime.startswith('audio/'):
                    return "[üéµ]"
                elif mime.startswith('video/'):
                    return "[üé¨]"
                elif 'sticker' in mime or mime == 'application/x-tgsticker':
                    return "[üé™]"
                else:
                    return "[üìé]"
            else:
                return "[üìé]"
        elif hasattr(media, 'voice') or str(type(media)).find('Voice') != -1:
            return "[üé§]"
        elif hasattr(media, 'sticker') or str(type(media)).find('Sticker') != -1:
            return "[üé™]"
        else:
            return "[üìé]"

    async def triglistcmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        chat_id = str(message.chat_id)
        if chat_id not in self.triggers or not self.triggers[chat_id]:
            await utils.answer(message, self.strings["no_triggers"])
            return
        triggers = self.triggers[chat_id]
        count = len(triggers)
        trigger_list = []
        for trigger_name, data in triggers.items():
            mode = "üîí" if data["mode"] == "strict" else "üîç"
            preview = ""
            try:
                
                msg = await self.client.get_messages(int(data["chat_id"]), ids=data["message_id"])
                if msg.media:
                    preview += self.get_media_emoji(msg.media)
                    if msg.raw_text:
                        text_preview = msg.raw_text[:30]
                        if len(msg.raw_text) > 30:
                            text_preview += "..."
                        preview += f" {text_preview}"
                else:
                    if msg.raw_text:
                        text_preview = msg.raw_text[:30]
                        if len(msg.raw_text) > 30:
                            text_preview += "..."
                        preview = text_preview
            except:
                preview = "[—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ]"
            
            trigger_list.append(
                f"{data['id']}. {mode} <code>{trigger_name}</code> ‚Üí {preview}"
            )
        await utils.answer(message, self.strings["trigger_list"].format(count, "\n".join(trigger_list)))

    async def trigbancmd(self, message):
        """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        if message.is_reply:
            reply_msg = await message.get_reply_message()
            user_id = reply_msg.sender_id
        else:
            args = utils.get_args_raw(message)
            if not args or not args.isdigit():
                await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return
            user_id = int(args)
        
        blacklist = self.db.get("Triggers", "blacklist", []) or []
        if user_id in blacklist:
            await utils.answer(message, self.strings["already_banned"])
            return
        
        blacklist.append(user_id)
        self.db.set("Triggers", "blacklist", blacklist)
        await utils.answer(message, self.strings["banned"])

    async def trigunbancmd(self, message):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        if message.is_reply:
            reply_msg = await message.get_reply_message()
            user_id = reply_msg.sender_id
        else:
            args = utils.get_args_raw(message)
            if not args or not args.isdigit():
                await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return
            user_id = int(args)
        
        blacklist = self.db.get("Triggers", "blacklist", []) or []
        if user_id not in blacklist:
            await utils.answer(message, self.strings["not_banned"])
            return
        
        blacklist.remove(user_id)
        self.db.set("Triggers", "blacklist", blacklist)
        await utils.answer(message, self.strings["unbanned"])

    async def trigbanlistcmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        blacklist = self.db.get("Triggers", "blacklist", []) or []
        if not blacklist:
            await utils.answer(message, self.strings["empty_ban_list"])
            return
        
        ban_list = []
        for user_id in blacklist:
            try:
                user = await self.client.get_entity(user_id)
                name = user.first_name
                if user.last_name:
                    name += f" {user.last_name}"
                ban_list.append(f"{name} (<code>{user_id}</code>)")
            except:
                ban_list.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code>")
        
        await utils.answer(message, self.strings["ban_list"].format("\n".join(ban_list)))

    async def watcher(self, message):
        if not message.text:
            return
        chat_id = str(message.chat_id)
        chats = self.db.get("Triggers", "chats", {}) or {}
        if not chats.get(chat_id, False):
            return
        if chat_id not in self.triggers or not self.triggers[chat_id]:
            return
        blacklist = self.db.get("Triggers", "blacklist", []) or []
        if message.sender_id in blacklist:
            return
        
        text = message.text.lower()
        for trigger_name, data in self.triggers[chat_id].items():
            match = False
            if data["mode"] == "strict":
                
                if text.strip() == trigger_name.strip():
                    match = True
            else:
                if trigger_name in text:
                    match = True
            if match:
                try:
                    
                    original_msg = await self.client.get_messages(int(data["chat_id"]), ids=data["message_id"])
                    
                    
                    await self.client.send_message(
                        message.chat_id,
                        original_msg.message or "",
                        reply_to=message.id,
                        file=original_msg.media
                    )
                    
                except Exception as e:
                    
                    error_info = f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ '{trigger_name}':\n"
                    error_info += f"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π chat_id: {data.get('chat_id', '–ù–ï –ù–ê–ô–î–ï–ù')}\n"
                    error_info += f"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π message_id: {data.get('message_id', '–ù–ï –ù–ê–ô–î–ï–ù')}\n"
                    error_info += f"–û—à–∏–±–∫–∞: {str(e)}"
                    await message.reply(error_info)
                break