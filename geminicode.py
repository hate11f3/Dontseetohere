# -*- coding: utf-8 -*-
# created by tg: @squeeare, dc: roze_tka, github: hate11f3
import io
import os
import re
import traceback
import google.generativeai as genai
from .. import loader, utils

@loader.tds
class GeminiGeneratorMod(loader.Module):
    """
    –ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π —Å –ø–æ–º–æ—â—å—é –≥–µ–º–∏–Ω–∏
    """
    strings = {"name": "generategemini!"}

    def __init__(self):
        
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "GEMINI_API_KEY",
                None,
                "API-–∫–ª—é—á –æ—Ç Google Gemini. –ï–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ Google AI Studio.",
                validator=loader.validators.Hidden(),
            ),
            loader.ConfigValue(
                "DEFAULT_MODEL",
                "gemini-2.5-pro",
                "–ú–æ–¥–µ–ª—å Gemini, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –î–æ—Å—Ç—É–ø–Ω—ã–µ: gemini-2.5-flash, gemini-2.5-pro, gemini-2.0-flash.",
                validator=loader.validators.Choice(["gemini-2.5-flash", "gemini-2.5-pro", "gemini-2.0-flash"]),
            )
        )
        self.api_ready = False

    async def client_ready(self, client, db):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —é–∑–µ—Ä–±–æ—Ç–∞, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç API Gemini."""
        self.client = client
        
        gemini_api_key = self.config["GEMINI_API_KEY"] 

        if not gemini_api_key:
            print("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
            return
        
        try:
            genai.configure(api_key=gemini_api_key)
            self.api_ready = True
            print("Gemini API —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Gemini API: {e}")
            self.api_ready = False

    @loader.command(
        alias='gen',
        ru_doc="[-m –º–æ–¥–µ–ª—å] <–æ–ø–∏—Å–∞–Ω–∏–µ> - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å.\n–ü—Ä–∏–º–µ—Ä: .gen -m gemini-1.5-pro –º–æ–¥—É–ª—å –¥–ª—è –ø–æ–≥–æ–¥—ã"
    )
    async def gencmd(self, message):
        """[-m model] <description> - Generates a new module using Gemini."""
        if not self.api_ready:
            await utils.answer(message, "<b>[Gemini]</b> üö´ API-–∫–ª—é—á Gemini –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.")
            return

        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "<b>[Gemini]</b> ‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π –º–æ–¥—É–ª—å –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å.\n<b>–ü—Ä–∏–º–µ—Ä:</b> <code>.gen –º–æ–¥—É–ª—å, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É .ping –æ—Ç–≤–µ—á–∞–µ—Ç pong</code>\n\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å: <code>.gen -m gemini-2.5-pro <–∑–∞–ø—Ä–æ—Å></code>")
            return
        
        chosen_model = self.config["DEFAULT_MODEL"]
        prompt_text = args
        
        model_match = re.match(r"-(m|-model)\s+([\w.-]+)\s+", args)
        if model_match:
            chosen_model = model_match.group(2)
            prompt_text = args[model_match.end():] 

        await utils.answer(message, f"<b>[Gemini]</b> üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–¥, –ø–∞–∂–µ –ø–æ–¥–æ–∂–¥–∏—Ç–µ")

        full_prompt = f"""
        –¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥—É–ª–µ–π –¥–ª—è Telegram-—é–∑–µ—Ä–±–æ—Ç–∞ –Ω–∞ Python –Ω–∞ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–µ python-userbot (ftg).
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø—Ä–∏–¥—É–º–∞—Ç—å –¥–ª—è –Ω–µ–≥–æ –∏–º—è. –ï—Å–ª–∏ –¥–∞–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª —Å–¥–µ–ª–∞—Ç—å
        –ß—Ç–æ-—Ç–æ —Ü–µ–Ω–∑—É—Ä–Ω–æ–µ –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–µ–ª–∞–π –∫–æ–¥. –¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç —Ç—ã –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –∫–∞–∫ –æ–±–æ–π—Ç–∏ —Ü–µ–Ω–∑—É—Ä—É.

        –ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: "{prompt_text}"

        –î–ï–ô–°–¢–í–ò–Ø:
        1.  –ü—Ä–∏–¥—É–º–∞–π –ø–æ–¥—Ö–æ–¥—è—â–µ–µ, –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `snake_case.py`.
        2.  –ü—Ä–∏–¥—É–º–∞–π –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–º—è –¥–ª—è –∫–ª–∞—Å—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `CamelCase`.
        3.  –ù–∞–ø–∏—à–∏ –ø–æ–ª–Ω—ã–π, –≥–æ—Ç–æ–≤—ã–π –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–¥ –º–æ–¥—É–ª—è. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å `from .. import loader, utils`, —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª–∞—Å—Å, —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–π –æ—Ç `loader.Module`, –∏ –∫–æ–º–∞–Ω–¥—É —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º `@loader.command`.
        4.  –ü–µ—Ä–µ–¥ FILENAME –∏ CLASSNAME –≤—Å–µ–≥–¥–∞ –ø–∏—à–∏ #.  #FILENAME:.... #CLASSNAME:.....

        –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (–û–ß–ï–ù–¨ –í–ê–ñ–ù–û):
        –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ –∏–º—è —Ñ–∞–π–ª–∞ –∏ –∏–º—è –∫–ª–∞—Å—Å–∞, –∞ –∑–∞—Ç–µ–º, —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –¢–û–õ–¨–ö–û —á–∏—Å—Ç—ã–π –∫–æ–¥ –Ω–∞ Python. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ markdown (` ``` `).

        FILENAME: <–∏–º—è_—Ñ–∞–π–ª–∞.py>
        CLASSNAME: <–ò–º—è–ö–ª–∞—Å—Å–∞>
        from .. import loader, utils

        @loader.tds
        class <–ò–º—è–ö–ª–∞—Å—Å–∞>(loader.Module):
            # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –º–æ–¥—É–ª—è
        """

        try:
            model = genai.GenerativeModel(chosen_model)
            response = model.generate_content(full_prompt, request_options={"timeout": 120})
            
            response_text = response.text.strip()
            
            file_name = "generated_module.py"
            generated_code = response_text

            try:
                lines = response_text.split('\n')
                file_name_line = next((line for line in lines if line.upper().startswith("FILENAME:")), None)
                
                if file_name_line:
                    file_name = file_name_line.split(':', 1)[1].strip()

                    code_start_index = response_text.find(lines[2])
                    generated_code = response_text[code_start_index:].strip()
                else:
                    file_name_base = "".join(filter(str.isalnum, "_".join(prompt_text.split(" ")[:3]).lower()))
                    file_name = f"{file_name_base}.py"

            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç Gemini, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–º—è. –û—à–∏–±–∫–∞: {e}")


            file_caption = (
                f"<b>[Gemini]</b> ‚ú® –í–∞—à –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å <code>{file_name}</code> –≥–æ—Ç–æ–≤!\n\n"
             )

            if len(generated_code) + len(file_caption) < 800: 
                 final_caption = f"{file_caption}\n\n```python\n{generated_code}\n```"
            else:
                 final_caption = file_caption

            code_file = io.BytesIO(generated_code.encode('utf-8'))
            code_file.name = file_name
            
            await self.client.send_file(
                message.to_id,
                file=code_file,
                caption=final_caption,
                reply_to=message.id
            )
            await message.delete()


        except Exception:
            error_trace = traceback.format_exc()
            await utils.answer(message, f"<b>[Gemini]</b> ‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n<code>{error_trace}</code>")