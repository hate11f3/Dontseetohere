from .. import loader, utils
import aiohttp
import chardet
import os

@loader.tds
class EncodingFixer(loader.Module):
    strings = {"name": "EncodingFixer"}

    @loader.command()
    async def checkenc(self, message):
        reply = await message.get_reply_message()
        if not reply or not reply.file:
            await message.edit("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å –Ω–∞ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            return

        path = await reply.download_media(file="./")
        with open(path, "rb") as f:
            raw = f.read()
        enc = chardet.detect(raw)['encoding']

        await message.edit(f"üìë –ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞: `{enc}`")

    @loader.command()
    async def fixenc(self, message):
        reply = await message.get_reply_message()
        if not reply or not reply.file:
            await message.edit("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å –Ω–∞ —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∏.")
            return

        path = await reply.download_media(file="./")
        with open(path, "rb") as f:
            raw = f.read()
        enc = chardet.detect(raw)['encoding']

        if enc.lower() == "utf-8":
            await message.edit("‚úîÔ∏è –§–∞–π–ª —É–∂–µ –≤ UTF-8.")
            os.remove(path)
            return

        try:
            text = raw.decode(enc)
        except Exception:
            try:
                text = raw.decode(enc, errors='ignore')
            except Exception as e:
                await message.edit(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å: {e}")
                os.remove(path)
                return

        new_path = path + "_utf8.txt"
        with open(new_path, "w", encoding="utf-8") as f:
            f.write(text)

        await message.client.send_file(message.chat_id, new_path, caption=f"‚úÖ –ü–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–ª –∏–∑ {enc} –≤ UTF-8.")
        await message.delete()
        os.remove(path)
        os.remove(new_path)
